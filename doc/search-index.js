var searchIndex = JSON.parse('{\
"mio":{"doc":"Mio is a fast, low-level I/O library for Rust focusing on …","t":[0,3,3,3,8,10,10,10,0,3,3,3,3,3,3,3,3,3,0,0,5,3,3,3,12,0,0,3,3,3,3,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["event","Event","Events","Iter","Source","register","reregister","deregister","net","TcpKeepalive","TcpListener","TcpSocket","TcpStream","UdpSocket","SocketAddr","UnixDatagram","UnixListener","UnixStream","unix","pipe","new","Receiver","Sender","SourceFd","0","features","guide","Interest","Poll","Registry","Token","0","Waker","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","register","reregister","deregister","register","reregister","deregister","register","reregister","deregister","register","reregister","deregister","register","reregister","deregister","register","reregister","deregister","register","reregister","deregister","register","reregister","deregister","register","reregister","deregister","drop","from","from","from","next","size_hint","count","clone","clone","clone","clone","clone","default","cmp","cmp","eq","ne","eq","ne","partial_cmp","partial_cmp","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","bitor","bitor_assign","hash","read","read_vectored","read","read_vectored","read","read_vectored","write","write_vectored","flush","write","write_vectored","flush","write","write_vectored","flush","as_raw_fd","as_raw_fd","as_raw_fd","as_raw_fd","as_raw_fd","as_raw_fd","as_raw_fd","as_raw_fd","as_raw_fd","as_raw_fd","as_raw_fd","from_raw_fd","from_raw_fd","from_raw_fd","from_raw_fd","from_raw_fd","from_raw_fd","from_raw_fd","from_raw_fd","from_raw_fd","into_raw_fd","into_raw_fd","into_raw_fd","into_raw_fd","into_raw_fd","into_raw_fd","into_raw_fd","into_raw_fd","into_raw_fd","READABLE","WRITABLE","add","remove","is_readable","is_writable","is_aio","is_lio","registry","poll","new","register","reregister","deregister","try_clone","is_unnamed","as_pathname","set_nonblocking","set_nonblocking","new","wake","token","is_readable","is_writable","is_error","is_read_closed","is_write_closed","is_priority","is_aio","is_lio","with_capacity","capacity","is_empty","iter","clear","bind","from_std","accept","local_addr","set_ttl","ttl","take_error","new_v4","new_v6","bind","connect","listen","set_reuseaddr","get_reuseaddr","set_reuseport","get_reuseport","set_linger","get_linger","set_recv_buffer_size","get_recv_buffer_size","set_send_buffer_size","get_send_buffer_size","set_keepalive","get_keepalive","set_keepalive_params","get_keepalive_time","get_keepalive_interval","get_keepalive_retries","get_localaddr","with_time","with_interval","with_retries","new","connect","from_std","peer_addr","local_addr","shutdown","set_nodelay","nodelay","set_ttl","ttl","take_error","peek","bind","from_std","local_addr","peer_addr","send_to","recv_from","peek_from","send","recv","peek","connect","set_broadcast","broadcast","set_multicast_loop_v4","multicast_loop_v4","set_multicast_ttl_v4","multicast_ttl_v4","set_multicast_loop_v6","multicast_loop_v6","set_ttl","ttl","join_multicast_v4","join_multicast_v6","leave_multicast_v4","leave_multicast_v6","only_v6","take_error","bind","from_std","connect","unbound","pair","local_addr","peer_addr","recv_from","recv","send_to","send","take_error","shutdown","bind","from_std","accept","local_addr","take_error","connect","from_std","pair","local_addr","peer_addr","take_error","shutdown"],"q":["mio","mio::event","","","","","","","mio","mio::net","","","","","","","","","mio","mio::unix","mio::unix::pipe","","","mio::unix","","mio","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mio::unix","","","","","","","mio::net","","","","","","","mio::unix::pipe","","","","","","","","","","","","","","mio","","","","","","","","","","","","","","","","mio::event","","","","","","","","","","","","","","","","","","","","","","","","","","mio::net","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mio::unix","","","mio::unix::pipe","","","","","","mio::net","","","","","","","","","","","","","","","","","","","mio::unix::pipe","","","mio::event","","","mio","","mio::event","","mio::net","","mio","","","","","","","","","","","mio::unix","mio::net","mio::unix::pipe","","mio","","mio::event","","","mio::net","","","","","","","","mio","","","mio::unix::pipe","","mio::net","","","","mio::unix::pipe","","","mio::net","","","","","","mio","","mio::unix::pipe","","mio::net","","","","","","","mio::unix::pipe","","mio::net","","","","","","","mio::unix::pipe","","mio::net","","","","","","","mio","","","","","","","","","","","","","","","mio::net","","mio::unix::pipe","","mio","","mio::event","","","","","","","","","","","","","","mio::net","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Readiness event types and utilities.","A readiness event.","A collection of readiness events.","<code>Events</code> iterator.","An event source that may be registered with <code>Registry</code>.","Register <code>self</code> with the given <code>Registry</code> instance.","Re-register <code>self</code> with the given <code>Registry</code> instance.","Deregister <code>self</code> from the given <code>Registry</code> instance.","Networking primitives.","Configures a socket’s TCP keepalive parameters.","A structure representing a socket server","A non-blocking TCP socket used to configure a stream or …","A non-blocking TCP stream between a local socket and a …","A User Datagram Protocol socket.","An address associated with a <code>mio</code> specific Unix socket.","A Unix datagram socket.","A non-blocking Unix domain socket server.","A non-blocking Unix stream socket.","Unix only extensions.","Unix pipe.","Create a new non-blocking Unix pipe.","Receiving end of an Unix pipe.","Sending end of an Unix pipe.","Adapter for [<code>RawFd</code>] providing an <code>event::Source</code> …","","Mio’s optional features.","Getting started guide.","Interest used in registering.","Polls for readiness events on all registered values.","Registers I/O resources.","Associates readiness events with <code>event::Source</code>s.","","Waker allows cross-thread waking of <code>Poll</codeonverts a <code>RawFd</code> to a <code>TcpListener</code>.","Converts a <code>RawFd</code> to a <code>TcpSocket</code>.","Converts a <code>RawFd</code> to a <code>TcpStream</code>.","Converts a <code>RawFd</code> to a <code>UdpSocket</code>.","Converts a <code>RawFd</code> to a <code>UnixDatagram</code>.","Converts a <code>RawFd</code> to a <code>UnixListener</code>.","Converts a <code>RawFd</code> to a <code>UnixStream</code>.","","","","","","","","","","Returns a <code>Interest</code> set representing readable interests.","Returns a <code>Interest</code> set representing writable interests.","Add together two <code>Interest</code>.","Removes <code>other</code> <code>Interest</code> from <code>self</code>.","Returns true if the value includes readable readiness.","Returns true if the value includes writable readiness.","Returns true if <code>Interest</code> contains AIO readiness","Returns true if <code>Interest</code> contains LIO readiness","Create a separate <code>Registry</code> which can be used to register …","Wait for readiness events","Return a new <code>Poll</code> handle.","Register an <code>event::Source</code> with the <code>Poll</code> instance.","Re-register an [<code>event::Source</code>] with the <code>Poll</code> instance.","Deregister an [<code>event::Source</code>] with the <code>Poll</code> instance.","Creates a new independently owned <code>Registry</code>.","Returns <code>true</code> if the address is unnamed.","Returns the contents of this address if it is a <code>pathname</code> …","Set the <code>Sender</code> into or out of non-blocking mode.","Set the <code>Receiver</code> into or out of non-blocking mode.","Create a new <code>Waker</code>.","Wake up the <code>Poll</code> associated with this <code>Waker</code>.","Returns the event’s token.","Returns true if the event contains readable readiness.","Returns true if the event contains writable readiness.","Returns true if the event contains error readiness.","Returns true if the event contains read closed readiness.","Returns true if the event contains write closed readiness.","Returns true if the event contains priority readiness.","Returns true if the event contains AIO readiness.","Returns true if the event contains LIO readiness.","Return a new <code>Events</code> capable of holding up to <code>capacity</code> …","Returns the number of <code>Event</code> values that <code>self</code> can hold.","Returns <code>true</code> if <code>self</code> contains no <code>Event</code> values.","Returns an iterator over the <code>Event</code> values.","Clearing all <code>Event</code> values from container explicitly.","Convenience method to bind a new TCP listener to the …","Creates a new <code>TcpListener</code> from a standard <code>net::TcpListener</code>…","Accepts a new <code>TcpStream</code>.","Returns the local socket address of this listener.","Sets the value for the <code>IP_TTL</code> option on this socket.","Gets the value of the <code>IP_TTL</code> option for this socket.","Get the value of the <code>SO_ERROR</code> option on this socket.","Create a new IPv4 TCP socket.","Create a new IPv6 TCP socket.","Bind <code>addr</code> to the TCP socket.","Connect the socket to <code>addr</code>.","Listen for inbound connections, converting the socket to a…","Sets the value of <code>SO_REUSEADDR</code> on this socket.","Get the value of <code>SO_REUSEADDR</code> set on this socket.","Sets the value of <code>SO_REUSEPORT</code> on this socket. Only …","Get the value of <code>SO_REUSEPORT</code> set on this socket. Only …","Sets the value of <code>SO_LINGER</code> on this socket.","Gets the value of <code>SO_LINGER</code> on this socket","Sets the value of <code>SO_RCVBUF</code> on this socket.","Get the value of <code>SO_RCVBUF</code> set on this socket.","Sets the value of <code>SO_SNDBUF</code> on this socket.","Get the value of <code>SO_SNDBUF</code> set on this socket.","Sets whether keepalive messages are enabled to be sent on …","Returns whether or not TCP keepalive probes will be sent …","Sets parameters configuring TCP keepalive probes for this …","Returns the amount of time after which TCP keepalive …","Returns the time interval between TCP keepalive probes, …","Returns the maximum number of TCP keepalive probes that …","Returns the local address of this socket","on idle connections.","Sets the time interval between TCP keepalive probes. This …","Sets the maximum number of TCP keepalive probes that will …","Returns a new, empty set of TCP keepalive parameters.","Create a new TCP stream and issue a non-blocking connect …","Creates a new <code>TcpStream</code> from a standard <code>net::TcpStream</code>.","Returns the socket address of the remote peer of this TCP …","Returns the socket address of the local half of this TCP …","Shuts down the read, write, or both halves of this …","Sets the value of the <code>TCP_NODELAY</code> option on this socket.","Gets the value of the <code>TCP_NODELAY</code> option on this socket.","Sets the value for the <code>IP_TTL</code> option on this socket.","Gets the value of the <code>IP_TTL</code> option for this socket.","Get the value of the <code>SO_ERROR</code> option on this socket.","Receives data on the socket from the remote address to …","Creates a UDP socket from the given address.","Creates a new <code>UdpSocket</code> from a standard <code>net::UdpSocket</code>.","Returns the socket address that this socket was created …","Returns the socket address of the remote peer this socket …","Sends data on the socket to the given address. On …","Receives data from the socket. On success, returns the …","Receives data from the socket, without removing it from …","Sends data on the socket to the address previously bound …","Receives data from the socket previously bound with …","Receives data from the socket, without removing it from …","Connects the UDP socket setting the default destination …","Sets the value of the <code>SO_BROADCAST</code> option for this socket.","Gets the value of the <code>SO_BROADCAST</code> option for this socket.","Sets the value of the <code>IP_MULTICAST_LOOP</code> option for this …","Gets the value of the <code>IP_MULTICAST_LOOP</code> option for this …","Sets the value of the <code>IP_MULTICAST_TTL</code> option for this …","Gets the value of the <code>IP_MULTICAST_TTL</code> option for this …","Sets the value of the <code>IPV6_MULTICAST_LOOP</code> option for this …","Gets the value of the <code>IPV6_MULTICAST_LOOP</code> option for this …","Sets the value for the <code>IP_TTL</code> option on this socket.","Gets the value of the <code>IP_TTL</code> option for this socket.","Executes an operation of the <code>IP_ADD_MEMBERSHIP</code> type.","Executes an operation of the <code>IPV6_ADD_MEMBERSHIP</code> type.","Executes an operation of the <code>IP_DROP_MEMBERSHIP</code> type.","Executes an operation of the <code>IPV6_DROP_MEMBERSHIP</code> type.","Get the value of the <code>IPV6_V6ONLY</code> option on this socket.","Get the value of the <code>SO_ERROR</code> option on this socket.","Creates a Unix datagram socket bound to the given path.","Creates a new <code>UnixDatagram</code> from a standard …","Connects the socket to the specified address.","Creates a Unix Datagram socket which is not bound to any …","Create an unnamed pair of connected sockets.","Returns the address of this socket.","Returns the address of this socket’s peer.","Receives data from the socket.","Receives data from the socket.","Sends data on the socket to the specified address.","Sends data on the socket to the socket’s peer.","Returns the value of the <code>SO_ERROR</code> option.","Shut down the read, write, or both halves of this …","Creates a new <code>UnixListener</code> bound to the specified socket.","Creates a new <code>UnixListener</code> from a standard …","Accepts a new incoming connection to this listener.","Returns the local socket address of this listener.","Returns the value of the <code>SO_ERROR</code> option.","Connects to the socket named by <code>path</code>.","Creates a new <code>UnixStream</code> from a standard <code>net::UnixStream</code>.","Creates an unnamed pair of connected sockets.","Returns the socket address of the local half of this …","Returns the socket address of the remote half of this …","Returns the value of the <code>SO_ERROR</code> option.","Shuts down the read, write, or both halves of this …"],"i":[0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,3,0,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,2,2,2,2,2,2,2,7,7,7,7,7,7,7,8,8,8,8,8,8,8,9,9,9,9,9,9,9,3,3,3,3,3,3,3,3,3,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,18,18,18,18,18,18,18,19,19,19,19,19,19,19,20,20,20,20,20,20,20,21,21,21,21,21,21,21,2,2,2,8,8,8,9,9,9,14,14,14,17,17,17,18,18,18,19,19,19,20,20,20,21,21,21,15,8,9,9,13,13,13,4,3,11,13,16,16,4,3,4,4,3,3,4,3,4,5,6,2,7,8,9,3,10,11,13,12,14,15,16,17,18,19,20,21,4,4,3,9,9,17,17,21,21,8,8,8,17,17,17,21,21,21,5,6,8,9,14,15,17,18,19,20,21,8,9,14,15,17,18,19,20,21,8,9,14,15,17,18,19,20,21,4,4,4,4,4,4,4,4,5,5,5,6,6,6,6,7,7,8,9,10,10,11,11,11,11,11,11,11,11,11,12,12,12,12,12,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,21,21,21,21,21,21,21],"f":[null,null,null,null,null,[[["token",3],["interest",3],["registry",3]],["result",6]],[[["token",3],["interest",3],["registry",3]],["result",6]],[[["registry",3]],["result",6]],null,null,null,null,null,null,null,null,null,null,null,null,[[],["result",6]],null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["token",3],["interest",3],["registry",3]],["result",6]],[[["token",3],["interest",3],["registry",3]],["result",6]],[[["registry",3]],["result",6]],[[["token",3],["interest",3],["registry",3]],["result",6]],[[["token",3],["interest",3],["registry",3]],["result",6]],[[["registry",3]],["result",6]],[[["token",3],["interest",3],["registry",3]],["result",6]],[[["token",3],["interest",3],["registry",3]],["result",6]],[[["registry",3]],["result",6]],[[["token",3],["interest",3],["registry",3]],["result",6]],[[["token",3],["interest",3],["registry",3]],["result",6]],[[["registry",3]],["result",6]],[[["token",3],["interest",3],["registry",3]],["result",6]],[[["token",3],["interest",3],["registry",3]],["result",6]],[[["registry",3]],["result",6]],[[["token",3],["interest",3],["registry",3]],["result",6]],[[["token",3],["interest",3],["registry",3]],["result",6]],[[["registry",3]],["result",6]],[[["token",3],["interest",3],["registry",3]],["result",6]],[[["token",3],["interest",3],["registry",3]],["result",6]],[[["registry",3]],["result",6]],[[["token",3],["interest",3],["registry",3]],["result",6]],[[["token",3],["interest",3],["registry",3]],["result",6]],[[["registry",3]],["result",6]],[[["token",3],["interest",3],["registry",3]],["result",6]],[[["token",3],["interest",3],["registry",3]],["result",6]],[[["registry",3]],["result",6]],[[]],[[["childstdin",3]],["sender",3]],[[["childstdout",3]],["receiver",3]],[[["childstderr",3]],["receiver",3]],[[],["option",4]],[[]],[[],["usize",15]],[[],["interest",3]],[[],["token",3]],[[],["event",3]],[[],["iter",3]],[[],["tcpkeepalive",3]],[[],["tcpkeepalive",3]],[[["interest",3]],["ordering",4]],[[["token",3]],["ordering",4]],[[["interest",3]],["bool",15]],[[["interest",3]],["bool",15]],[[["token",3]],["bool",15]],[[["token",3]],["bool",15]],[[["interest",3]],[["ordering",4],["option",4]]],[[["token",3]],[["ordering",4],["option",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],[["usize",15],["result",6]]],[[],[["usize",15],["result",6]]],[[],[["usize",15],["result",6]]],[[],[["usize",15],["result",6]]],[[],[["usize",15],["result",6]]],[[],[["usize",15],["result",6]]],[[],[["usize",15],["result",6]]],[[],[["usize",15],["result",6]]],[[],["result",6]],[[],[["usize",15],["result",6]]],[[],[["usize",15],["result",6]]],[[],["result",6]],[[],[["usize",15],["result",6]]],[[],[["usize",15],["result",6]]],[[],["result",6]],[[],["rawfd",6]],[[],["rawfd",6]],[[],["rawfd",6]],[[],["rawfd",6]],[[],["rawfd",6]],[[],["rawfd",6]],[[],["rawfd",6]],[[],["rawfd",6]],[[],["rawfd",6]],[[],["rawfd",6]],[[],["rawfd",6]],[[["rawfd",6]],["sender",3]],[[["rawfd",6]],["receiver",3]],[[["rawfd",6]],["tcplistener",3]],[[["rawfd",6]],["tcpsocket",3]],[[["rawfd",6]],["tcpstream",3]],[[["rawfd",6]],["udpsocket",3]],[[["rawfd",6]],["unixdatagram",3]],[[["rawfd",6]],["unixlistener",3]],[[["rawfd",6]],["unixstream",3]],[[],["rawfd",6]],[[],["rawfd",6]],[[],["rawfd",6]],[[],["rawfd",6]],[[],["rawfd",6]],[[],["rawfd",6]],[[],["rawfd",6]],[[],["rawfd",6]],[[],["rawfd",6]],null,null,[[["interest",3]],["interest",3]],[[["interest",3]],[["option",4],["interest",3]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["registry",3]],[[["events",3],["option",4],["duration",3]],["result",6]],[[],[["result",6],["poll",3]]],[[["token",3],["interest",3]],["result",6]],[[["token",3],["interest",3]],["result",6]],[[],["result",6]],[[],[["registry",3],["result",6]]],[[],["bool",15]],[[],[["path",3],["option",4]]],[[["bool",15]],["result",6]],[[["bool",15]],["result",6]],[[["token",3],["registry",3]],[["result",6],["waker",3]]],[[],["result",6]],[[],["token",3]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["usize",15]],["events",3]],[[],["usize",15]],[[],["bool",15]],[[],["iter",3]],[[]],[[["socketaddr",4]],[["result",6],["tcplistener",3]]],[[["tcplistener",3]],["tcplistener",3]],[[],["result",6]],[[],[["result",6],["socketaddr",4]]],[[["u32",15]],["result",6]],[[],[["u32",15],["result",6]]],[[],[["result",6],["option",4]]],[[],[["result",6],["tcpsocket",3]]],[[],[["result",6],["tcpsocket",3]]],[[["socketaddr",4]],["result",6]],[[["socketaddr",4]],[["tcpstream",3],["result",6]]],[[["u32",15]],[["result",6],["tcplistener",3]]],[[["bool",15]],["result",6]],[[],[["bool",15],["result",6]]],[[["bool",15]],["result",6]],[[],[["bool",15],["result",6]]],[[["option",4],["duration",3]],["result",6]],[[],[["result",6],["option",4]]],[[["u32",15]],["result",6]],[[],[["u32",15],["result",6]]],[[["u32",15]],["result",6]],[[],[["u32",15],["result",6]]],[[["bool",15]],["result",6]],[[],[["bool",15],["result",6]]],[[["tcpkeepalive",3]],["result",6]],[[],[["result",6],["option",4]]],[[],[["result",6],["option",4]]],[[],[["result",6],["option",4]]],[[],[["result",6],["socketaddr",4]]],[[["duration",3]]],[[["duration",3]]],[[["u32",15]]],[[]],[[["socketaddr",4]],[["tcpstream",3],["result",6]]],[[["tcpstream",3]],["tcpstream",3]],[[],[["result",6],["socketaddr",4]]],[[],[["result",6],["socketaddr",4]]],[[["shutdown",4]],["result",6]],[[["bool",15]],["result",6]],[[],[["bool",15],["result",6]]],[[["u32",15]],["result",6]],[[],[["u32",15],["result",6]]],[[],[["result",6],["option",4]]],[[],[["usize",15],["result",6]]],[[["socketaddr",4]],[["result",6],["udpsocket",3]]],[[["udpsocket",3]],["udpsocket",3]],[[],[["result",6],["socketaddr",4]]],[[],[["result",6],["socketaddr",4]]],[[["socketaddr",4]],[["usize",15],["result",6]]],[[],["result",6]],[[],["result",6]],[[],[["usize",15],["result",6]]],[[],[["usize",15],["result",6]]],[[],[["usize",15],["result",6]]],[[["socketaddr",4]],["result",6]],[[["bool",15]],["result",6]],[[],[["bool",15],["result",6]]],[[["bool",15]],["result",6]],[[],[["bool",15],["result",6]]],[[["u32",15]],["result",6]],[[],[["u32",15],["result",6]]],[[["bool",15]],["result",6]],[[],[["bool",15],["result",6]]],[[["u32",15]],["result",6]],[[],[["u32",15],["result",6]]],[[["ipv4addr",3]],["result",6]],[[["u32",15],["ipv6addr",3]],["result",6]],[[["ipv4addr",3]],["result",6]],[[["u32",15],["ipv6addr",3]],["result",6]],[[],[["bool",15],["result",6]]],[[],[["result",6],["option",4]]],[[["asref",8],["path",3]],[["unixdatagram",3],["result",6]]],[[["unixdatagram",3]],["unixdatagram",3]],[[["asref",8],["path",3]],["result",6]],[[],[["unixdatagram",3],["result",6]]],[[],["result",6]],[[],[["result",6],["socketaddr",3]]],[[],[["result",6],["socketaddr",3]]],[[],["result",6]],[[],[["usize",15],["result",6]]],[[["asref",8],["path",3]],[["usize",15],["result",6]]],[[],[["usize",15],["result",6]]],[[],[["result",6],["option",4]]],[[["shutdown",4]],["result",6]],[[["asref",8],["path",3]],[["result",6],["unixlistener",3]]],[[["unixlistener",3]],["unixlistener",3]],[[],["result",6]],[[],[["result",6],["socketaddr",3]]],[[],[["result",6],["option",4]]],[[["asref",8],["path",3]],[["result",6],["unixstream",3]]],[[["unixstream",3]],["unixstream",3]],[[],["result",6]],[[],[["result",6],["socketaddr",3]]],[[],[["result",6],["socketaddr",3]]],[[],[["result",6],["option",4]]],[[["shutdown",4]],["result",6]]],"p":[[8,"Source"],[3,"SourceFd"],[3,"Token"],[3,"Interest"],[3,"Poll"],[3,"Registry"],[3,"SocketAddr"],[3,"Sender"],[3,"Receiver"],[3,"Waker"],[3,"Event"],[3,"Events"],[3,"Iter"],[3,"TcpListener"],[3,"TcpSocket"],[3,"TcpKeepalive"],[3,"TcpStream"],[3,"UdpSocket"],[3,"UnixDatagram"],[3,"UnixListener"],[3,"UnixStream"]]}\
}');
initSearch(searchIndex);